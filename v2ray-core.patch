diff --git a/domain2ip.go b/domain2ip.go
new file mode 100644
index 00000000..da1ad5c6
--- /dev/null
+++ b/domain2ip.go
@@ -0,0 +1,40 @@
+package core
+
+import (
+	"sync"
+)
+
+// DomainToIPs is a map of domain names to IP addresses
+// Note: there may be multiple IP addresses for a given domain
+var DomainToIPs = map[string][]string{}
+var domainMutex sync.RWMutex
+
+// GetDomainIPs returns IP addresses for a given domain
+func GetDomainIPs(domain string) ([]string, bool) {
+	domainMutex.RLock()
+	defer domainMutex.RUnlock()
+	ips, ok := DomainToIPs[domain]
+	return ips, ok
+}
+
+// SetDomainIPs sets IP addresses for a given domain
+func SetDomainIPs(domain string, ips []string) {
+	domainMutex.Lock()
+	defer domainMutex.Unlock()
+	DomainToIPs[domain] = ips
+}
+
+// DropDomainIPs drops specific IP address for a given domain from the cache
+func DropDomainIPs(domain string, ip string) {
+	domainMutex.Lock()
+	defer domainMutex.Unlock()
+	for i, existingIP := range DomainToIPs[domain] {
+		if existingIP == ip {
+			DomainToIPs[domain] = append(DomainToIPs[domain][:i], DomainToIPs[domain][i+1:]...)
+			if len(DomainToIPs[domain]) == 0 {
+				delete(DomainToIPs, domain)
+			}
+			break
+		}
+	}
+}
diff --git a/envoy/v2ray.go b/envoy/v2ray.go
new file mode 100644
index 0000000..bd787bf
--- /dev/null
+++ b/envoy/v2ray.go
@@ -0,0 +1,295 @@
+package v2ray
+
+// copied and modified from main/commands/run.go
+
+// feeding core.LoadConfig with a string reader containing the config
+// JSON seems the simplest way to run v2ray as a library
+//
+// Golang's JSON support seems a little cumbersome for a couple
+// string substitutions in a complex JSON snippet, so we just
+// use fmt.Sprintf to assemble the config
+//
+// The JSON file we build should look similar to the client example config
+// (that will be) documented here:
+// https://gitlab.com/stevenmcdonald/envoy-proxy-examples/v2ray/
+
+// We provide functions for starting and stopping several client services
+// independently. Unfortunately you can't start them all and tell v2ray to
+// use the one that works... but that's what Envoy is good at.
+
+import (
+	"fmt"
+	"os"
+	"os/signal"
+	"strings"
+	"syscall"
+
+	core "github.com/v2fly/v2ray-core/v5"
+	_ "github.com/v2fly/v2ray-core/v5/main/distro/all"
+)
+
+var osWsSignals = make(chan os.Signal, 1)
+var osWechatSignals = make(chan os.Signal, 1)
+var osSrtpSignals = make(chan os.Signal, 1)
+
+// getInbound
+//
+// @param port - port to listen for SOCKS5 connections
+func getInbound(clientPort int) string {
+	return fmt.Sprintf(`
+      {
+        "port": %d,
+        "protocol": "socks",
+        "sniffing": {
+          "enabled": true,
+          "destOverride": ["http", "tls"]
+        },
+        "settings": {
+          "auth": "noauth"
+        }
+      }`, clientPort)
+}
+
+func getWsConfig(clientPort int, serverAddress, serverWsPort, wsPath, id string, allowInsecure bool, serverName string) string {
+	return fmt.Sprintf(`
+  {
+    "log": {
+      "loglevel": "error"
+    },
+    "inbounds": [%s
+    ],
+    "outbounds": [
+      {
+        "protocol": "vmess",
+        "settings": {
+          "vnext": [
+            {
+              "address": "%s",
+              "port": %s,
+              "users": [
+                {
+                  "id": "%s",
+                  "alterId": 0
+                }
+              ]
+            }
+          ]
+        },
+        "streamSettings": {
+          "network": "ws",
+          "security": "tls",
+          "tlsSettings": {
+            "allowInsecure": %t,
+            "serverName": "%s"
+          },
+          "wsSettings": {
+            "path": "%s"
+          }
+        }
+      }
+    ]
+  }`, getInbound(clientPort), serverAddress, serverWsPort, id, allowInsecure, serverName, wsPath)
+}
+
+// getQUICConfig
+//
+// @param clientPort - port to listen on for SOCKS5 connections
+//
+// @param serverAddress - server address to connect to
+//
+// @param serverPort - server port to connect to
+//
+// @oaram type - type of QUIC obfuscation, should be "srtp" or "wechat-video"
+func getQuicConfig(clientPort int, serverAddress, serverPort, quicType, id string) string {
+	return fmt.Sprintf(`
+  {
+    "log": {
+      "loglevel": "error"
+    },
+    "inbounds": [%s
+    ],
+    "outbounds": [
+      {
+        "protocol": "vmess",
+        "settings": {
+          "vnext": [
+            {
+              "address": "%s",
+              "port": %s,
+              "users": [
+                {
+                  "id": "%s",
+                  "alterId": 0
+                }
+              ]
+            }
+          ]
+        },
+        "streamSettings": {
+          "network": "quic",
+          "quicSettings": {
+            "security": "aes-128-gcm",
+            "header": {
+              "type": "%s"
+            },
+            "key": "0"
+          }
+        }
+      }
+    ]
+  }`, getInbound(clientPort), serverAddress, serverPort, id, quicType)
+}
+
+func startServer(jsonConfig string) (*core.Instance, error) {
+	reader := strings.NewReader(jsonConfig)
+
+	config, err := core.LoadConfig(core.FormatJSON, reader)
+	if err != nil {
+		fmt.Printf("error reading config: %s\n", err)
+		return nil, err
+	}
+
+	server, err := core.New(config)
+	if err != nil {
+		fmt.Printf("error creating server: %s\n", err)
+		return nil, err
+	}
+
+	if err := server.Start(); err != nil {
+		fmt.Printf("failed to start %s\n", err)
+
+		_ = server.Close()
+
+		return nil, err
+	}
+
+	return server, nil
+}
+
+// WsConfigOptional holds optional configuration for WebSocket connections
+type WsConfigOptional struct {
+	AllowInsecure bool
+	ServerName    string
+}
+
+// StartWs - start v2ray, websocket transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param wsPath - path to the websocket on the server
+//
+// @param id - UUID used to authenticate with the server
+//
+// @param config - optional configuration (allowInsecure defaults to false, serverName defaults to serverAddress)
+//
+// @returns error, if transport could not be started, or `nil` on success.
+func StartWs(clientPort int, serverAddress, serverPort, wsPath, id string, config ...WsConfigOptional) error {
+	// Set defaults for optional config
+	allowInsecure := false
+	serverName := serverAddress
+
+	// Override with provided config if any
+	if len(config) > 0 {
+		cfg := config[0]
+		allowInsecure = cfg.AllowInsecure
+		if cfg.ServerName != "" {
+			serverName = cfg.ServerName
+		}
+	}
+
+	server, err := startServer(getWsConfig(clientPort, serverAddress, serverPort, wsPath, id, allowInsecure, serverName))
+	if err != nil {
+		return err
+	}
+
+	go func(server *core.Instance) {
+		defer func(server *core.Instance) {
+			_ = server.Close()
+		}(server)
+
+		{
+			signal.Notify(osWsSignals, syscall.SIGTERM)
+			<-osWsSignals
+		}
+	}(server)
+
+	return nil
+}
+
+func StopWs() {
+	osWsSignals <- syscall.SIGTERM
+}
+
+// StartSrtp - start v2ray, QUIC/SRTP transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param id - UUID used to authenticate with the server
+//
+// @returns error, if transport could not be started, or `nil` on success.
+func StartSrtp(clientPort int, serverAddress, serverPort, id string) error {
+	server, err := startServer(getQuicConfig(clientPort, serverAddress, serverPort, "srtp", id))
+	if err != nil {
+		return err
+	}
+
+	go func(server *core.Instance) {
+		defer func(server *core.Instance) {
+			_ = server.Close()
+		}(server)
+
+		{
+			signal.Notify(osSrtpSignals, syscall.SIGTERM)
+			<-osSrtpSignals
+		}
+	}(server)
+
+	return nil
+}
+
+func StopSrtp() {
+	osSrtpSignals <- syscall.SIGTERM
+}
+
+// StartWechat - start v2ray, QUIC/Wechat-video transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param id - UUID used to authenticate with the server
+//
+// @returns error, if transport could not be started, or `nil` on success.
+func StartWechat(clientPort int, serverAddress, serverPort, id string) error {
+	server, err := startServer(getQuicConfig(clientPort, serverAddress, serverPort, "wechat-video", id))
+	if err != nil {
+		return err
+	}
+
+	go func(server *core.Instance) {
+		defer func(server *core.Instance) {
+			_ = server.Close()
+		}(server)
+
+		{
+			signal.Notify(osWechatSignals, syscall.SIGTERM)
+			<-osWechatSignals
+		}
+	}(server)
+
+	return nil
+}
+
+func StopWechat() {
+	osWechatSignals <- syscall.SIGTERM
+}
diff --git a/transport/internet/websocket/dialer.go b/transport/internet/websocket/dialer.go
index 5357971b..1e942d82 100644
--- a/transport/internet/websocket/dialer.go
+++ b/transport/internet/websocket/dialer.go
@@ -38,6 +38,11 @@ func init() {
 func dialWebsocket(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig) (net.Conn, error) {
 	wsSettings := streamSettings.ProtocolSettings.(*Config)
 
+	originalDomain := dest.Address.Domain()
+	if ips, ok := core.GetDomainIPs(originalDomain); ok {
+		dest.Address = net.ParseAddress(ips[0])
+	}
+
 	dialer := &websocket.Dialer{
 		NetDial: func(network, addr string) (net.Conn, error) {
 			return internet.DialSystem(ctx, dest, streamSettings.SocketSettings)
@@ -63,7 +68,11 @@ func dialWebsocket(ctx context.Context, dest net.Destination, streamSettings *in
 				return nil, newError("dial TLS connection failed").Base(err)
 			}
 			conn, err = securityEngine.Client(conn,
-				security.OptionWithDestination{Dest: dest},
+				security.OptionWithDestination{Dest: net.Destination{
+					Network: dest.Network,
+					Address: net.ParseAddress(originalDomain),
+					Port:    dest.Port,
+				}},
 				security.OptionWithALPN{ALPNs: []string{"http/1.1"}})
 			if err != nil {
 				return nil, newError("unable to create security protocol client from security engine").Base(err)
@@ -74,7 +83,7 @@ func dialWebsocket(ctx context.Context, dest net.Destination, streamSettings *in
 
 	host := dest.NetAddr()
 	if (protocol == "ws" && dest.Port == 80) || (protocol == "wss" && dest.Port == 443) {
-		host = dest.Address.String()
+		host = originalDomain
 	}
 	uri := protocol + "://" + host + wsSettings.GetNormalizedPath()
 
